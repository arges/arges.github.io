<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tracing on</title><link>chrisarges.net/tags/tracing/</link><description>Recent content in tracing on</description><generator>Hugo -- gohugo.io</generator><copyright>Chris J Arges</copyright><lastBuildDate>Fri, 11 Dec 2020 12:31:49 -0600</lastBuildDate><atom:link href="chrisarges.net/tags/tracing/index.xml" rel="self" type="application/rss+xml"/><item><title>tracing linux</title><link>chrisarges.net/posts/2020-12-11-tracing-on-linux/</link><pubDate>Fri, 11 Dec 2020 12:31:49 -0600</pubDate><guid>chrisarges.net/posts/2020-12-11-tracing-on-linux/</guid><description>I&amp;rsquo;ve written up about some of my work at Confluera here:
medium confluera</description></item><item><title>bpf for linux tracing</title><link>chrisarges.net/posts/2019-03-21-bpf-for-tracing/</link><pubDate>Thu, 21 Mar 2019 11:54:37 -0500</pubDate><guid>chrisarges.net/posts/2019-03-21-bpf-for-tracing/</guid><description>Overview Originally called eBPF for extended Berkeley Packet Filter, BPF is an in-kernel bytecode interpreter that is very multi-purpose. In this post, I&amp;rsquo;m going to focus on its tracing capabilities.
To use BPF one can use the bpf syscall. This provides a way to both load BPF bytecode programs and also create memory maps for sharing data between kernel and user space.
Because of the complexity, using bpf in a DIY method becomes a bit complex.</description></item><item><title>tracing in linux</title><link>chrisarges.net/posts/2018-10-04-tracing-in-linux/</link><pubDate>Thu, 04 Oct 2018 09:39:10 -0500</pubDate><guid>chrisarges.net/posts/2018-10-04-tracing-in-linux/</guid><description>Tracing in Linux is robust, flexible and has many options. So what mechanisms exist both in kernel and user space for instrumenting the kernel? In addition what is available in which kernel version, and what requirements does each technology require? Here we&amp;rsquo;ll mostly focus on syscall tracing.
Overview A great overview on Linux tracing systems can be found here. Overall thinking about tracing systems as data sources (in kernel), and frontends help explain why there are so many tools.</description></item></channel></rss>
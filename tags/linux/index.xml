<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on</title><link>chrisarges.net/tags/linux/</link><description>Recent content in linux on</description><generator>Hugo -- gohugo.io</generator><copyright>Chris J Arges</copyright><lastBuildDate>Mon, 26 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="chrisarges.net/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>playing piano in linux</title><link>chrisarges.net/posts/2021-04-26-playing-piano-in-linux/</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><guid>chrisarges.net/posts/2021-04-26-playing-piano-in-linux/</guid><description>While on vacation I brought my small MIDI keyboard along so that the kids could easily practice piano. This keyboard does not generate sounds on its own, so it requires some other device to generate the sounds based on the MIDI output. I used my laptop running Linux to accomplish this with some minimal setup.
First you must plug the keyboard in via USB. If you launch the program and get sounds, great!</description></item><item><title>tracing linux</title><link>chrisarges.net/posts/2020-12-11-tracing-on-linux/</link><pubDate>Fri, 11 Dec 2020 12:31:49 -0600</pubDate><guid>chrisarges.net/posts/2020-12-11-tracing-on-linux/</guid><description>I&amp;rsquo;ve written up about some of my work at Confluera here:
medium confluera</description></item><item><title>setting up a Minecraft server</title><link>chrisarges.net/posts/2020-09-04-setting-up-a-minecraft-server/</link><pubDate>Fri, 04 Sep 2020 10:22:46 -0500</pubDate><guid>chrisarges.net/posts/2020-09-04-setting-up-a-minecraft-server/</guid><description>We&amp;rsquo;ve been spending a lot of time at home lately due to the current pandemic. Because of this the kids have really enjoyed playing Minecraft together. Initially I set up a LAN server for them to play together, but wanted to set up a community server that their friends could also access. Here I&amp;rsquo;ll describe some approaches to this with the goal of keeping things automated, low cost, secure and easy for friends to play.</description></item><item><title>bpf for linux tracing</title><link>chrisarges.net/posts/2019-03-21-bpf-for-tracing/</link><pubDate>Thu, 21 Mar 2019 11:54:37 -0500</pubDate><guid>chrisarges.net/posts/2019-03-21-bpf-for-tracing/</guid><description>Overview Originally called eBPF for extended Berkeley Packet Filter, BPF is an in-kernel bytecode interpreter that is very multi-purpose. In this post, I&amp;rsquo;m going to focus on its tracing capabilities.
To use BPF one can use the bpf syscall. This provides a way to both load BPF bytecode programs and also create memory maps for sharing data between kernel and user space.
Because of the complexity, using bpf in a DIY method becomes a bit complex.</description></item><item><title>the magic of linux clone</title><link>chrisarges.net/posts/2019-01-14-the-magic-of-linux-clone/</link><pubDate>Mon, 14 Jan 2019 12:44:27 -0600</pubDate><guid>chrisarges.net/posts/2019-01-14-the-magic-of-linux-clone/</guid><description>Processes and threads are concepts that have been used across many operating systems and programming languages. While we tend to think of &amp;lsquo;process&amp;rsquo; as a heavy thing and &amp;rsquo;thread&amp;rsquo; as a light thing, how they are implemented and handled depends on context. This article will focus on how the Linux operating system handles these concepts and the mechanisms used.
Creating a new process Generally in Linux if you want to create a new process in C you can do the following:</description></item><item><title>tracing in linux</title><link>chrisarges.net/posts/2018-10-04-tracing-in-linux/</link><pubDate>Thu, 04 Oct 2018 09:39:10 -0500</pubDate><guid>chrisarges.net/posts/2018-10-04-tracing-in-linux/</guid><description>Tracing in Linux is robust, flexible and has many options. So what mechanisms exist both in kernel and user space for instrumenting the kernel? In addition what is available in which kernel version, and what requirements does each technology require? Here we&amp;rsquo;ll mostly focus on syscall tracing.
Overview A great overview on Linux tracing systems can be found here. Overall thinking about tracing systems as data sources (in kernel), and frontends help explain why there are so many tools.</description></item><item><title>using sed encryption on harddrives</title><link>chrisarges.net/posts/2018-02-15-using-sed-encryption-on-disks/</link><pubDate>Thu, 15 Feb 2018 21:42:03 -0600</pubDate><guid>chrisarges.net/posts/2018-02-15-using-sed-encryption-on-disks/</guid><description>Disk encryption can be accomplished on Linux in many ways depending on your hardware. LUKS provides block-layer level encryption, and most modern Linux distros provide easy ways to use and setup keys with the device. The eCryptFS project provides filesystem level encryption which gives a bit more flexibility.
However, many new disks have encryption built-in to the drive&amp;rsquo;s controller and can be interfaced with utilities such as hdparm and sedutil-cli. This built in encryption is called FDE (Full Disk Encryption) or SED (Self Encrypting Drives).</description></item><item><title>signed kernel modules using an auxiliary key</title><link>chrisarges.net/posts/2016-03-25-signed-kernel-modules-using-an-auxiliary-key/</link><pubDate>Fri, 25 Mar 2016 14:55:59 -0500</pubDate><guid>chrisarges.net/posts/2016-03-25-signed-kernel-modules-using-an-auxiliary-key/</guid><description>This post explains how to build a kernel and corresponding modules with the following criteria:
CONFIG_MODULE_SIG_KEY is set to default and we destroy the private part of the signing key after the initial build
CONFIG_SYSTEM_TRUSTED_KEYS contains an additional certificate we can use to sign modules built afterwards or out of tree
Module signing enforcement is turned on
By having a separate key for signing modules, one could potentially revoke the &amp;lsquo;out of tree&amp;rsquo; module signing key; but keep the built-in key for modules built during the initial build time.</description></item><item><title>a simple robotic car</title><link>chrisarges.net/posts/2016-03-18-a-simple-robotic-car/</link><pubDate>Fri, 18 Mar 2016 22:56:12 -0500</pubDate><guid>chrisarges.net/posts/2016-03-18-a-simple-robotic-car/</guid><description>Here is a really cool car robot I built:
This post will document roughly how I put it together. If you want to build your own you can read this guide for an outline and perhaps share or improve the code.
Setup Board For my car robot I&amp;rsquo;m using a Raspberry Pi Zero since it is small and uses low power. First go to this link, download and install Raspbian Lite and ensure you can boot into it on your Pi.</description></item><item><title>building ubuntu kernels with debug symbols</title><link>chrisarges.net/posts/2015-10-02-building-ubuntu-kernels-with-debug-symbols/</link><pubDate>Fri, 02 Oct 2015 08:53:52 -0500</pubDate><guid>chrisarges.net/posts/2015-10-02-building-ubuntu-kernels-with-debug-symbols/</guid><description>Occasionally it is useful to be able to build a kernel the Ubuntu way with debug symbols. The following is how to install dependencies, clone the tree, and finally build in such a way that ddeb packages get generated.
Here&amp;rsquo;s how:
sudo apt-get build-dep linux-image-$(uname -r) sudo apt-get install fakeroot pkg-config-dbgsym git git clone git://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/wily cd wily fakeroot debian/rules clean debian/rules build-generic fakeroot debian/rules binary-generic binary-headers skipdbg=false Wait a bit and you should see a -dbgsym package get generated.</description></item><item><title>using linux livepatch on ubuntu</title><link>chrisarges.net/posts/2015-09-21-livepatch-on-ubuntu/</link><pubDate>Mon, 21 Sep 2015 13:03:26 -0500</pubDate><guid>chrisarges.net/posts/2015-09-21-livepatch-on-ubuntu/</guid><description>Livepatching was introduced in the v4.0 kernel, and now Ubuntu 15.10 has a kernel capable of using this new and exciting feature. This works by using ftrace to redirect kernel function calls to the newly patched functions. In addition mechanisms for hooking into module insertion and removal are used for patching loadable modules. This feature also has sysfs directories for tracking which patches are applied and which functions they modify. With the basics aside, this blog post will show some simple examples of how to livepatch your kernel.</description></item><item><title>linux make deb-pkg speedup</title><link>chrisarges.net/posts/2015-07-30-linux-make-deb-pkg-speedup/</link><pubDate>Thu, 30 Jul 2015 15:20:31 -0500</pubDate><guid>chrisarges.net/posts/2015-07-30-linux-make-deb-pkg-speedup/</guid><description>Because I&amp;rsquo;ve run make deb-pkg so many times, I&amp;rsquo;ve started to see exactly where it starts to slow down even with really large machines. Observing cpu usage, I noticed that many parts of the build were serialized on a single core. Upon further investigation I found the following.
Upstream Packaging Module installation takes a really long time, and when building with make deb-pkg -jN, you&amp;rsquo;ll see output like the following:</description></item><item><title>accessing maas database directly</title><link>chrisarges.net/posts/2015-05-27-accessing-maas-db-directly/</link><pubDate>Wed, 27 May 2015 13:02:46 -0500</pubDate><guid>chrisarges.net/posts/2015-05-27-accessing-maas-db-directly/</guid><description>Let&amp;rsquo;s say you&amp;rsquo;ve messed up your MAAS installation and have no idea how to recover data about your nodes. Have no fear, you can access the django managed database directly.
Just use the following as root:
maas-region-admin dbshell --installed Now you have access to an SQL command line interface.
For example if I want to see all hostnames and power_parameters for my servers, I can do the following:
select hostname,power_parameters from maasserver_node;</description></item><item><title>using gcov/lcov with the linux kernel</title><link>chrisarges.net/posts/2014-11-13-using-gcovlcov-with-linux-kernel/</link><pubDate>Thu, 13 Nov 2014 09:45:00 -0800</pubDate><guid>chrisarges.net/posts/2014-11-13-using-gcovlcov-with-linux-kernel/</guid><description>GCOV/LCOV are amazing tools to figure out code coverage in the Linux kernel. It is fairly trivial to setup on your own machine. First, enable the following in your kernel configuration:
CONFIG_GCOV_KERNEL=y CONFIG_GCOV_PROFILE_ALL=y CONFIG_GCOV_FORMAT_AUTODETECT=y Build the kernel and install headers/debug/images to your machine. Note there may be issues if you run this on a separate machine so consult the official documentation for additional information.
Boot the machine with the instrumented kernel and use the following to verify GCOV_KERNEL was setup properly:</description></item><item><title>getting kernel crashdumps for hung machines</title><link>chrisarges.net/posts/2014-10-31-getting-kernel-crashdumps-for-hung/</link><pubDate>Fri, 31 Oct 2014 13:53:00 -0700</pubDate><guid>chrisarges.net/posts/2014-10-31-getting-kernel-crashdumps-for-hung/</guid><description>Debugging hung machines can be a bit tricky. Here I&amp;rsquo;ll document methods to trigger a crashdump when these hangs occur. What exactly does it mean when a machine &amp;lsquo;hangs&amp;rsquo; or &amp;lsquo;freezes-up&amp;rsquo;? More information can be found in the kernel documentation, but overall there are really a few types of hangs.
A &amp;ldquo;Soft Lock-Up&amp;rdquo; is when the kernel loops in kernel mode for a duration without giving tasks a chance to run.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dkms on</title><link>/tags/dkms/</link><description>Recent content in dkms on</description><generator>Hugo -- gohugo.io</generator><copyright>Chris J Arges</copyright><lastBuildDate>Thu, 05 Sep 2013 07:10:00 -0700</lastBuildDate><atom:link href="/tags/dkms/index.xml" rel="self" type="application/rss+xml"/><item><title>building a proper debian source package with dkms</title><link>/posts/2013-09-05-building-proper-debian-source-package/</link><pubDate>Thu, 05 Sep 2013 07:10:00 -0700</pubDate><guid>/posts/2013-09-05-building-proper-debian-source-package/</guid><description>How can one use DKMS to build a proper debian source package? The mkdsc command will actually generate one automatically, but there are a few more steps to simplify it, and bring it up to date.
First follow the steps here for setting up a DKMS package. Make sure you can build it using dkms. Then do the following:
#First pull in some dependencies as necessary sudo apt-get install devscripts debhelper # Create the debian source package sudo dkms mkdsc -m hello -v 0.</description></item><item><title>building a binary debian kernel module package with dkms</title><link>/posts/2013-07-23-building-binary-debian-kernel-module/</link><pubDate>Tue, 23 Jul 2013 14:40:00 -0700</pubDate><guid>/posts/2013-07-23-building-binary-debian-kernel-module/</guid><description>DKMS packaging works great for building out of tree kernel modules. However, what do you do when you need to install to a machine without a compiler? You can accompish this by using DKMS&amp;rsquo;s mkdriverdisk functionality.
First follow the steps here for setting up a proper DKMS package.
After you&amp;rsquo;ve built the module successfully, you can use the following bash script to extract the .deb installer from the driverdisk. This way you can copy the deb file to the target machine and install.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on</title><link>chrisarges.net/tags/golang/</link><description>Recent content in golang on</description><generator>Hugo -- gohugo.io</generator><copyright>Chris J Arges</copyright><lastBuildDate>Fri, 20 May 2016 15:53:09 -0500</lastBuildDate><atom:link href="chrisarges.net/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>creating a function wrapper in golang</title><link>chrisarges.net/posts/2016-05-20-creating-a-function-wrapper-in-golang/</link><pubDate>Fri, 20 May 2016 15:53:09 -0500</pubDate><guid>chrisarges.net/posts/2016-05-20-creating-a-function-wrapper-in-golang/</guid><description>Here is a snippet that allows one to create a &amp;lsquo;wrapper&amp;rsquo; function that you can input a generic function and parameters too in golang. callme takes a function and a variadic set of parameters. By using the reflect library we can properly check number of parameters a function has as well as value types. Finally we use Call to call the function with the processed parameters. A use case for this could be calling a function and allowing for retries or additional checking.</description></item></channel></rss>
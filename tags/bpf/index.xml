<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bpf on</title><link>chrisarges.net/tags/bpf/</link><description>Recent content in bpf on</description><generator>Hugo -- gohugo.io</generator><copyright>Chris J Arges</copyright><lastBuildDate>Thu, 21 Mar 2019 11:54:37 -0500</lastBuildDate><atom:link href="chrisarges.net/tags/bpf/index.xml" rel="self" type="application/rss+xml"/><item><title>bpf for linux tracing</title><link>chrisarges.net/posts/2019-03-21-bpf-for-tracing/</link><pubDate>Thu, 21 Mar 2019 11:54:37 -0500</pubDate><guid>chrisarges.net/posts/2019-03-21-bpf-for-tracing/</guid><description>Overview Originally called eBPF for extended Berkeley Packet Filter, BPF is an in-kernel bytecode interpreter that is very multi-purpose. In this post, I&amp;rsquo;m going to focus on its tracing capabilities.
To use BPF one can use the bpf syscall. This provides a way to both load BPF bytecode programs and also create memory maps for sharing data between kernel and user space.
Because of the complexity, using bpf in a DIY method becomes a bit complex.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>debian on</title><link>chrisarges.net/tags/debian/</link><description>Recent content in debian on</description><generator>Hugo -- gohugo.io</generator><copyright>Chris J Arges</copyright><lastBuildDate>Tue, 10 Sep 2013 09:30:00 -0700</lastBuildDate><atom:link href="chrisarges.net/tags/debian/index.xml" rel="self" type="application/rss+xml"/><item><title>use default gpg key for debuild</title><link>chrisarges.net/posts/2013-09-10-use-default-gpg-key-for-debuild/</link><pubDate>Tue, 10 Sep 2013 09:30:00 -0700</pubDate><guid>chrisarges.net/posts/2013-09-10-use-default-gpg-key-for-debuild/</guid><description>When using debuild -S to build a package on new machines, I need to go through the process of ensuring that my gpg is set up properly. If set up incorrectly, I get the following message with debuild -S:
gpg: skipped &amp;#34;User &amp;lt;user@host.com&amp;gt;&amp;#34;: secret key not available To fix this, I go through the following steps:
Ensure I have proper gpg keys set up. You can check if yours is installed properly using: gpg --list-keys</description></item><item><title>building a proper debian source package with dkms</title><link>chrisarges.net/posts/2013-09-05-building-proper-debian-source-package/</link><pubDate>Thu, 05 Sep 2013 07:10:00 -0700</pubDate><guid>chrisarges.net/posts/2013-09-05-building-proper-debian-source-package/</guid><description>How can one use DKMS to build a proper debian source package? The mkdsc command will actually generate one automatically, but there are a few more steps to simplify it, and bring it up to date.
First follow the steps here for setting up a DKMS package. Make sure you can build it using dkms. Then do the following:
#First pull in some dependencies as necessary sudo apt-get install devscripts debhelper # Create the debian source package sudo dkms mkdsc -m hello -v 0.</description></item><item><title>building a binary debian kernel module package with dkms</title><link>chrisarges.net/posts/2013-07-23-building-binary-debian-kernel-module/</link><pubDate>Tue, 23 Jul 2013 14:40:00 -0700</pubDate><guid>chrisarges.net/posts/2013-07-23-building-binary-debian-kernel-module/</guid><description>DKMS packaging works great for building out of tree kernel modules. However, what do you do when you need to install to a machine without a compiler? You can accompish this by using DKMS&amp;rsquo;s mkdriverdisk functionality.
First follow the steps here for setting up a proper DKMS package.
After you&amp;rsquo;ve built the module successfully, you can use the following bash script to extract the .deb installer from the driverdisk. This way you can copy the deb file to the target machine and install.</description></item></channel></rss>
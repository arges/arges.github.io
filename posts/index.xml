<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on</title><link>chrisarges.net/posts/</link><description>Recent content in Posts on</description><generator>Hugo -- gohugo.io</generator><copyright>Chris J Arges</copyright><lastBuildDate>Mon, 26 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="chrisarges.net/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>playing piano in linux</title><link>chrisarges.net/posts/2021-04-26-playing-piano-in-linux/</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><guid>chrisarges.net/posts/2021-04-26-playing-piano-in-linux/</guid><description>While on vacation I brought my small MIDI keyboard along so that the kids could easily practice piano. This keyboard does not generate sounds on its own, so it requires some other device to generate the sounds based on the MIDI output. I used my laptop running Linux to accomplish this with some minimal setup.
First you must plug the keyboard in via USB. If you launch the program and get sounds, great!</description></item><item><title>tracing linux</title><link>chrisarges.net/posts/2020-12-11-tracing-on-linux/</link><pubDate>Fri, 11 Dec 2020 12:31:49 -0600</pubDate><guid>chrisarges.net/posts/2020-12-11-tracing-on-linux/</guid><description>I&amp;rsquo;ve written up about some of my work at Confluera here:
medium confluera</description></item><item><title>setting up a Minecraft server</title><link>chrisarges.net/posts/2020-09-04-setting-up-a-minecraft-server/</link><pubDate>Fri, 04 Sep 2020 10:22:46 -0500</pubDate><guid>chrisarges.net/posts/2020-09-04-setting-up-a-minecraft-server/</guid><description>We&amp;rsquo;ve been spending a lot of time at home lately due to the current pandemic. Because of this the kids have really enjoyed playing Minecraft together. Initially I set up a LAN server for them to play together, but wanted to set up a community server that their friends could also access. Here I&amp;rsquo;ll describe some approaches to this with the goal of keeping things automated, low cost, secure and easy for friends to play.</description></item><item><title>install openssh on windows</title><link>chrisarges.net/posts/2019-07-16-openssh-install-on-windows/</link><pubDate>Tue, 16 Jul 2019 09:32:28 -0500</pubDate><guid>chrisarges.net/posts/2019-07-16-openssh-install-on-windows/</guid><description>The following are instructions on how to setup OpenSSH on various Windows server versions. This is great if you come from a Linux background and are very used to SSH for accessing machines.
Windows Server 2019 First run PowerShell as Administrator.
Next install SSH and SSHD for Windows:
Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0 Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0 Start-Service sshd Set-Service -Name sshd -StartupType &amp;#39;Automatic&amp;#39; Confirm installation by ensuring rules are correct:</description></item><item><title>bpf for linux tracing</title><link>chrisarges.net/posts/2019-03-21-bpf-for-tracing/</link><pubDate>Thu, 21 Mar 2019 11:54:37 -0500</pubDate><guid>chrisarges.net/posts/2019-03-21-bpf-for-tracing/</guid><description>Overview Originally called eBPF for extended Berkeley Packet Filter, BPF is an in-kernel bytecode interpreter that is very multi-purpose. In this post, I&amp;rsquo;m going to focus on its tracing capabilities.
To use BPF one can use the bpf syscall. This provides a way to both load BPF bytecode programs and also create memory maps for sharing data between kernel and user space.
Because of the complexity, using bpf in a DIY method becomes a bit complex.</description></item><item><title>the magic of linux clone</title><link>chrisarges.net/posts/2019-01-14-the-magic-of-linux-clone/</link><pubDate>Mon, 14 Jan 2019 12:44:27 -0600</pubDate><guid>chrisarges.net/posts/2019-01-14-the-magic-of-linux-clone/</guid><description>Processes and threads are concepts that have been used across many operating systems and programming languages. While we tend to think of &amp;lsquo;process&amp;rsquo; as a heavy thing and &amp;rsquo;thread&amp;rsquo; as a light thing, how they are implemented and handled depends on context. This article will focus on how the Linux operating system handles these concepts and the mechanisms used.
Creating a new process Generally in Linux if you want to create a new process in C you can do the following:</description></item><item><title>tracing in linux</title><link>chrisarges.net/posts/2018-10-04-tracing-in-linux/</link><pubDate>Thu, 04 Oct 2018 09:39:10 -0500</pubDate><guid>chrisarges.net/posts/2018-10-04-tracing-in-linux/</guid><description>Tracing in Linux is robust, flexible and has many options. So what mechanisms exist both in kernel and user space for instrumenting the kernel? In addition what is available in which kernel version, and what requirements does each technology require? Here we&amp;rsquo;ll mostly focus on syscall tracing.
Overview A great overview on Linux tracing systems can be found here. Overall thinking about tracing systems as data sources (in kernel), and frontends help explain why there are so many tools.</description></item><item><title>using sed encryption on harddrives</title><link>chrisarges.net/posts/2018-02-15-using-sed-encryption-on-disks/</link><pubDate>Thu, 15 Feb 2018 21:42:03 -0600</pubDate><guid>chrisarges.net/posts/2018-02-15-using-sed-encryption-on-disks/</guid><description>Disk encryption can be accomplished on Linux in many ways depending on your hardware. LUKS provides block-layer level encryption, and most modern Linux distros provide easy ways to use and setup keys with the device. The eCryptFS project provides filesystem level encryption which gives a bit more flexibility.
However, many new disks have encryption built-in to the drive&amp;rsquo;s controller and can be interfaced with utilities such as hdparm and sedutil-cli. This built in encryption is called FDE (Full Disk Encryption) or SED (Self Encrypting Drives).</description></item><item><title>getting activity logs from azure</title><link>chrisarges.net/posts/2018-01-22-getting-activity-logs-from-azure/</link><pubDate>Mon, 22 Jan 2018 11:26:32 -0600</pubDate><guid>chrisarges.net/posts/2018-01-22-getting-activity-logs-from-azure/</guid><description>I was tasked with looking into how to connect to the Azure API using python. Below are some of my setup notes for getting this working.
First install the az client. Follow this link to get things setup on your platform: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest
In order to create our client you can create a json file that contains the necessary credentials. This can be consumed by the python library.
az login az ad sp create-for-rbac --sdk-auth &amp;gt; mycredentials.</description></item><item><title>using terraform with ansible</title><link>chrisarges.net/posts/2018-01-05-using-terraform-and-ansible/</link><pubDate>Fri, 05 Jan 2018 15:24:58 -0600</pubDate><guid>chrisarges.net/posts/2018-01-05-using-terraform-and-ansible/</guid><description>A lot of my work lately has been transforming one-off machines into systems that can be re-generated and re-deployed easily. For much of these we use Debian packaging and ansible. In many instances the output needs to be cloud images as well as things that can be imaged on baremetal. For this we use Packer which can drive ansible. While using ansible to describe how a system is composed is nice, we also need to describe how those systems will be deployed.</description></item><item><title>creating a function wrapper in golang</title><link>chrisarges.net/posts/2016-05-20-creating-a-function-wrapper-in-golang/</link><pubDate>Fri, 20 May 2016 15:53:09 -0500</pubDate><guid>chrisarges.net/posts/2016-05-20-creating-a-function-wrapper-in-golang/</guid><description>Here is a snippet that allows one to create a &amp;lsquo;wrapper&amp;rsquo; function that you can input a generic function and parameters too in golang. callme takes a function and a variadic set of parameters. By using the reflect library we can properly check number of parameters a function has as well as value types. Finally we use Call to call the function with the processed parameters. A use case for this could be calling a function and allowing for retries or additional checking.</description></item><item><title>signed kernel modules using an auxiliary key</title><link>chrisarges.net/posts/2016-03-25-signed-kernel-modules-using-an-auxiliary-key/</link><pubDate>Fri, 25 Mar 2016 14:55:59 -0500</pubDate><guid>chrisarges.net/posts/2016-03-25-signed-kernel-modules-using-an-auxiliary-key/</guid><description>This post explains how to build a kernel and corresponding modules with the following criteria:
CONFIG_MODULE_SIG_KEY is set to default and we destroy the private part of the signing key after the initial build
CONFIG_SYSTEM_TRUSTED_KEYS contains an additional certificate we can use to sign modules built afterwards or out of tree
Module signing enforcement is turned on
By having a separate key for signing modules, one could potentially revoke the &amp;lsquo;out of tree&amp;rsquo; module signing key; but keep the built-in key for modules built during the initial build time.</description></item><item><title>a simple robotic car</title><link>chrisarges.net/posts/2016-03-18-a-simple-robotic-car/</link><pubDate>Fri, 18 Mar 2016 22:56:12 -0500</pubDate><guid>chrisarges.net/posts/2016-03-18-a-simple-robotic-car/</guid><description>Here is a really cool car robot I built:
This post will document roughly how I put it together. If you want to build your own you can read this guide for an outline and perhaps share or improve the code.
Setup Board For my car robot I&amp;rsquo;m using a Raspberry Pi Zero since it is small and uses low power. First go to this link, download and install Raspbian Lite and ensure you can boot into it on your Pi.</description></item><item><title>grub-reboot with submenus</title><link>chrisarges.net/posts/2016-02-25-grub-reboot-with-submenus/</link><pubDate>Thu, 25 Feb 2016 10:05:51 -0500</pubDate><guid>chrisarges.net/posts/2016-02-25-grub-reboot-with-submenus/</guid><description>Occasionally it is useful to be able to reboot a machine into an earlier kernel and watching and waiting for the grub menu isn&amp;rsquo;t always feasible or convenient.
The command grub-reboot allows you to set a temporary entry to use for the next reboot; however you need to know the correct input in order for it to work.
First, look at /boot/grub/grub.cfg and determine which kernel you want to reboot into.</description></item><item><title>flashing coreboot on an x60t</title><link>chrisarges.net/posts/2016-02-08-coreboot-on-an-x60t/</link><pubDate>Mon, 08 Feb 2016 08:48:47 -0600</pubDate><guid>chrisarges.net/posts/2016-02-08-coreboot-on-an-x60t/</guid><description>I was gifted a dusty X60t and remembered how it was one of the more well supported targets for coreboot/libreboot. Thus I decided to take it apart and reflash the BIOS. The following articles explains how this is done. Note, that it is possible to flash the BIOS from a booted Linux install; I decided to do things the hard way.
Disassembly This guide does a really good job of explaining how to take apart the X60t.</description></item><item><title>building ubuntu kernels with debug symbols</title><link>chrisarges.net/posts/2015-10-02-building-ubuntu-kernels-with-debug-symbols/</link><pubDate>Fri, 02 Oct 2015 08:53:52 -0500</pubDate><guid>chrisarges.net/posts/2015-10-02-building-ubuntu-kernels-with-debug-symbols/</guid><description>Occasionally it is useful to be able to build a kernel the Ubuntu way with debug symbols. The following is how to install dependencies, clone the tree, and finally build in such a way that ddeb packages get generated.
Here&amp;rsquo;s how:
sudo apt-get build-dep linux-image-$(uname -r) sudo apt-get install fakeroot pkg-config-dbgsym git git clone git://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/wily cd wily fakeroot debian/rules clean debian/rules build-generic fakeroot debian/rules binary-generic binary-headers skipdbg=false Wait a bit and you should see a -dbgsym package get generated.</description></item><item><title>using linux livepatch on ubuntu</title><link>chrisarges.net/posts/2015-09-21-livepatch-on-ubuntu/</link><pubDate>Mon, 21 Sep 2015 13:03:26 -0500</pubDate><guid>chrisarges.net/posts/2015-09-21-livepatch-on-ubuntu/</guid><description>Livepatching was introduced in the v4.0 kernel, and now Ubuntu 15.10 has a kernel capable of using this new and exciting feature. This works by using ftrace to redirect kernel function calls to the newly patched functions. In addition mechanisms for hooking into module insertion and removal are used for patching loadable modules. This feature also has sysfs directories for tracking which patches are applied and which functions they modify. With the basics aside, this blog post will show some simple examples of how to livepatch your kernel.</description></item><item><title>linux make deb-pkg speedup</title><link>chrisarges.net/posts/2015-07-30-linux-make-deb-pkg-speedup/</link><pubDate>Thu, 30 Jul 2015 15:20:31 -0500</pubDate><guid>chrisarges.net/posts/2015-07-30-linux-make-deb-pkg-speedup/</guid><description>Because I&amp;rsquo;ve run make deb-pkg so many times, I&amp;rsquo;ve started to see exactly where it starts to slow down even with really large machines. Observing cpu usage, I noticed that many parts of the build were serialized on a single core. Upon further investigation I found the following.
Upstream Packaging Module installation takes a really long time, and when building with make deb-pkg -jN, you&amp;rsquo;ll see output like the following:</description></item><item><title>accessing maas database directly</title><link>chrisarges.net/posts/2015-05-27-accessing-maas-db-directly/</link><pubDate>Wed, 27 May 2015 13:02:46 -0500</pubDate><guid>chrisarges.net/posts/2015-05-27-accessing-maas-db-directly/</guid><description>Let&amp;rsquo;s say you&amp;rsquo;ve messed up your MAAS installation and have no idea how to recover data about your nodes. Have no fear, you can access the django managed database directly.
Just use the following as root:
maas-region-admin dbshell --installed Now you have access to an SQL command line interface.
For example if I want to see all hostnames and power_parameters for my servers, I can do the following:
select hostname,power_parameters from maasserver_node;</description></item><item><title>qemu/kvm guest debugging</title><link>chrisarges.net/posts/2015-04-13-qemu-kvm-guest-debugging/</link><pubDate>Mon, 13 Apr 2015 12:24:22 -0500</pubDate><guid>chrisarges.net/posts/2015-04-13-qemu-kvm-guest-debugging/</guid><description>Occasionally it is useful to debug a running guest VM&amp;rsquo;s kernel. Setup your host machine for virtual machine hosting with QEMU/KVM, and add ddebs to your host system using this wiki.
Next, compile your own qemu with --enable-debug. Setup your environment to use this binary (if using libvirt), or call it directly using qemu.
Ensure you have vmlinux of the L1 guest somewhere in your L0 machine.
First, setup your L1 guest.</description></item><item><title>using gcov/lcov with the linux kernel</title><link>chrisarges.net/posts/2014-11-13-using-gcovlcov-with-linux-kernel/</link><pubDate>Thu, 13 Nov 2014 09:45:00 -0800</pubDate><guid>chrisarges.net/posts/2014-11-13-using-gcovlcov-with-linux-kernel/</guid><description>GCOV/LCOV are amazing tools to figure out code coverage in the Linux kernel. It is fairly trivial to setup on your own machine. First, enable the following in your kernel configuration:
CONFIG_GCOV_KERNEL=y CONFIG_GCOV_PROFILE_ALL=y CONFIG_GCOV_FORMAT_AUTODETECT=y Build the kernel and install headers/debug/images to your machine. Note there may be issues if you run this on a separate machine so consult the official documentation for additional information.
Boot the machine with the instrumented kernel and use the following to verify GCOV_KERNEL was setup properly:</description></item><item><title>getting kernel crashdumps for hung machines</title><link>chrisarges.net/posts/2014-10-31-getting-kernel-crashdumps-for-hung/</link><pubDate>Fri, 31 Oct 2014 13:53:00 -0700</pubDate><guid>chrisarges.net/posts/2014-10-31-getting-kernel-crashdumps-for-hung/</guid><description>Debugging hung machines can be a bit tricky. Here I&amp;rsquo;ll document methods to trigger a crashdump when these hangs occur. What exactly does it mean when a machine &amp;lsquo;hangs&amp;rsquo; or &amp;lsquo;freezes-up&amp;rsquo;? More information can be found in the kernel documentation, but overall there are really a few types of hangs.
A &amp;ldquo;Soft Lock-Up&amp;rdquo; is when the kernel loops in kernel mode for a duration without giving tasks a chance to run.</description></item><item><title>using ktest.pl with ubuntu</title><link>chrisarges.net/posts/2014-07-01-using-ktestpl-with-ubuntu/</link><pubDate>Tue, 01 Jul 2014 13:10:00 -0700</pubDate><guid>chrisarges.net/posts/2014-07-01-using-ktestpl-with-ubuntu/</guid><description>Bisecting the kernel is one of those tasks that&amp;rsquo;s time-consuming and error prone. Ktest.pl is a script that lives in the linux kernel source tree that helps to automate this process. The script is extremely extensible and as such takes time to understand which variables need to be set and where. In this post, I&amp;rsquo;ll go over how to perform a kernel bisection using a VM as the target machine. In this example I&amp;rsquo;m using &amp;lsquo;ubuntu&amp;rsquo; as the VM name.</description></item><item><title>using CRIU to checkpoint a kernel build</title><link>chrisarges.net/posts/2014-06-25-using-criu-to-checkpoint-kernel-build/</link><pubDate>Wed, 25 Jun 2014 13:46:00 -0700</pubDate><guid>chrisarges.net/posts/2014-06-25-using-criu-to-checkpoint-kernel-build/</guid><description>CRIU stands for Checkpoint/Restart in Userspace. As the criu package should be landing in Utopic soon, and I wanted to test drive it to see how it handles.
I thought of an interesting example of being in the middle of a linux kernel build and a security update needing to be installed and the machine rebooted. While most of us could probably just reboot and rebuild, why not checkpoint it and save the progress; then restore after the system update?</description></item><item><title>manually deploying openstack with a virtual maas on ubuntu trusty (part 2)</title><link>chrisarges.net/posts/2014-06-16-manually-deploying-openstack-with_16/</link><pubDate>Mon, 16 Jun 2014 10:16:00 -0700</pubDate><guid>chrisarges.net/posts/2014-06-16-manually-deploying-openstack-with_16/</guid><description>In the previous post, I went over how to setup a virtual MAAS environment using KVM [1]. Here I will explain how to setup Juju for use with this environment. For this setup, we’ll use the maas-server as the juju client to interact with the cluster.
This guide was very useful:
https://maas.ubuntu.com/docs/juju-quick-start.html
Update to the latest stable tools:
sudo apt-add-repository ppa:juju/stable
sudo apt-get update
Next we want to setup juju on the host machine.</description></item><item><title>manually deploying openstack with a virtual maas on ubuntu trusty (part 1)</title><link>chrisarges.net/posts/2014-06-13-manually-deploying-openstack-with/</link><pubDate>Fri, 13 Jun 2014 15:05:00 -0700</pubDate><guid>chrisarges.net/posts/2014-06-13-manually-deploying-openstack-with/</guid><description>The goal of this new few series of posts is to be able to setup virtual machines to simulate a real-world openstack deployment using maas and juju. This goes through setting up a maas-server in a VM as well as setting up maas-nodes in VMs and getting them enlisted/commissioned into the maas-server. Next juju is configured to use the maas cluster. Finally, openstack is deployed using juju. OverviewRequirementsIdeally, a large server with 16 cores, 32G memory, 500G disk.</description></item><item><title>using kgraft with ubuntu</title><link>chrisarges.net/posts/2014-06-06-using-kgraft-with-ubuntu/</link><pubDate>Fri, 06 Jun 2014 11:50:00 -0700</pubDate><guid>chrisarges.net/posts/2014-06-06-using-kgraft-with-ubuntu/</guid><description>New live kernel patching projects have hit LKML recently here and here, and I&amp;rsquo;ve taken the opportunity to test drive kGraft with the Ubuntu kernel. This post documents how to get a sample patch working.
First, I had to take the patches and apply them against the ubuntu-utopic kernel, which is based on 3.15-rc8 as of this post. They cherry-picked cleanly and the branch I&amp;rsquo;m using is stored here. In addition to applying the patches I had to also enable CONFIG_KGRAFT.</description></item><item><title>netfilter hooks to snoop packets</title><link>chrisarges.net/posts/2014-03-24-netfilter-hooks-to-snoop-packets/</link><pubDate>Mon, 24 Mar 2014 07:47:00 -0700</pubDate><guid>chrisarges.net/posts/2014-03-24-netfilter-hooks-to-snoop-packets/</guid><description>I&amp;rsquo;ve written a short netfilter hook to help snoop some outgoing packets. You can view the source code here. I read a few articles to get an idea of how to put things together.</description></item><item><title>creating a local vm easily and automatically</title><link>chrisarges.net/posts/2014-03-05-creating-local-vm-easily-and/</link><pubDate>Wed, 05 Mar 2014 14:22:00 -0800</pubDate><guid>chrisarges.net/posts/2014-03-05-creating-local-vm-easily-and/</guid><description>This is the nifty little snippet I use to create a quick and dirty VM for testing. Just apt-get install vmbuilder and run the following:
NAME=&amp;#34;ubuntu&amp;#34; vmbuilder kvm ubuntu --arch &amp;#39;amd64&amp;#39; --suite &amp;#39;precise&amp;#39; \ --rootsize &amp;#39;8096&amp;#39; \ --mem &amp;#39;1024&amp;#39; \ --components &amp;#39;main,universe&amp;#39; \ --addpkg vim \ --addpkg openssh-server \ --addpkg bash-completion \ --user &amp;#39;ubuntu&amp;#39; --pass &amp;#39;ubuntu&amp;#39; \ -d /var/lib/libvirt/images/${NAME} \ --libvirt qemu:///system \ -o \ -v --debug \ --hostname ${NAME} If you need additional help consult the serverguide</description></item><item><title>using LTS HWE kernels with MAAS nodes</title><link>chrisarges.net/posts/2014-03-05-using-lts-hwe-kernels-with-maas-nodes/</link><pubDate>Wed, 05 Mar 2014 14:21:00 -0800</pubDate><guid>chrisarges.net/posts/2014-03-05-using-lts-hwe-kernels-with-maas-nodes/</guid><description>Once you get machines setup using MAAS, you may want to be able to install an alternative kernel when starting a machine. Here&amp;rsquo;s how to do it.
This is assuming we have already commissioned a node, but have not started it.
If we are using the normal installer with MAAS do the following: Edit /etc/maas/preseeds/preseed_master on your maas-server
Add the second line as shown:
d-i base-installer/kernel/image string linux-server d-i base-installer/kernel/override-image string linux-generic-lts-saucy Start the node, Now when you boot you should be using the 3.</description></item><item><title>creating a local vm domain from an ubuntu cloud image</title><link>chrisarges.net/posts/2014-02-17-creating-local-vm-domain-from-ubuntu/</link><pubDate>Mon, 17 Feb 2014 11:43:00 -0800</pubDate><guid>chrisarges.net/posts/2014-02-17-creating-local-vm-domain-from-ubuntu/</guid><description>It is very convenient to be able to quickly spin up a local VM in order to do some sort of bug verification or testing. Generally I can use a cloud provider to spin up an instance, but occasionally you need the flexibility of a local VM in order to setup more complex networking or other specific environments.
This link was extremely helpful in figuring our how to setup a ready to boot image, but I noticed a few issues.</description></item><item><title>automatic bisection of qemu with console and monitor interaction</title><link>chrisarges.net/posts/2013-12-16-automatic-bisection-of-qemu-with/</link><pubDate>Mon, 16 Dec 2013 14:39:00 -0800</pubDate><guid>chrisarges.net/posts/2013-12-16-automatic-bisection-of-qemu-with/</guid><description>I had some fun debugging a performance issue after VM migration on v1.0. Because this was fixed in newer versions, a bisect was in order. Doing this manually becomes very tedious so writing some scripts to use git bisect run really helps. Here I&amp;rsquo;ll document how I did this in case others find it useful when trying to bisect issues in qemu.
First step is getting the problem reproducible using the command line.</description></item><item><title>setup an external drives as raid1</title><link>chrisarges.net/posts/2013-12-16-setup-external-drives-as-raid1/</link><pubDate>Mon, 16 Dec 2013 14:37:00 -0800</pubDate><guid>chrisarges.net/posts/2013-12-16-setup-external-drives-as-raid1/</guid><description>I purchased a cheap two drive USB enclosure in order to setup an external drive that had RAID-1 so I could backup photos and recordings.
First, I formatted both drives. Then I ran extended smart self-tests to ensure I had decent drives. With RAID-1 and two drives I can only tolerate 1 drive failure.
Next ensure mdadm is installed: sudo apt-get install mdadm
Determine which dev devices the disks show up as.</description></item><item><title>use default gpg key for debuild</title><link>chrisarges.net/posts/2013-09-10-use-default-gpg-key-for-debuild/</link><pubDate>Tue, 10 Sep 2013 09:30:00 -0700</pubDate><guid>chrisarges.net/posts/2013-09-10-use-default-gpg-key-for-debuild/</guid><description>When using debuild -S to build a package on new machines, I need to go through the process of ensuring that my gpg is set up properly. If set up incorrectly, I get the following message with debuild -S:
gpg: skipped &amp;#34;User &amp;lt;user@host.com&amp;gt;&amp;#34;: secret key not available To fix this, I go through the following steps:
Ensure I have proper gpg keys set up. You can check if yours is installed properly using: gpg --list-keys</description></item><item><title>fixing a firewire audio interface</title><link>chrisarges.net/posts/2013-09-06-fixing-presonus-firestudio-interface/</link><pubDate>Fri, 06 Sep 2013 14:34:00 -0700</pubDate><guid>chrisarges.net/posts/2013-09-06-fixing-presonus-firestudio-interface/</guid><description>I had an issue where my Presonus Firestudio Project would have a red blinking light when I turned it on. This was before I even plugged it into my computer. Determining that it wasn't a software issue, I decided to open the thing up and figure out what's going on. I did the usual and checked for any bulging capacitors, burn marks, or just anything that would give me a clue why this wasn't working.</description></item><item><title>diy kubb set</title><link>chrisarges.net/posts/2013-09-06-diy-kubb-set/</link><pubDate>Fri, 06 Sep 2013 14:24:00 -0700</pubDate><guid>chrisarges.net/posts/2013-09-06-diy-kubb-set/</guid><description>After a visit to England, I had the pleasure of playing this awesome game and decided I'd like to play it back home. After a bit of a sticker shock after seeing it on Amazon, I decided that it would be easy enough to build my own set. I enlisted the help of a friend and set out to the hardware store. &amp;nbsp;I would recommend buying a little bit extra, but overall the materials came to around $18.</description></item><item><title>building a proper debian source package with dkms</title><link>chrisarges.net/posts/2013-09-05-building-proper-debian-source-package/</link><pubDate>Thu, 05 Sep 2013 07:10:00 -0700</pubDate><guid>chrisarges.net/posts/2013-09-05-building-proper-debian-source-package/</guid><description>How can one use DKMS to build a proper debian source package? The mkdsc command will actually generate one automatically, but there are a few more steps to simplify it, and bring it up to date.
First follow the steps here for setting up a DKMS package. Make sure you can build it using dkms. Then do the following:
#First pull in some dependencies as necessary sudo apt-get install devscripts debhelper # Create the debian source package sudo dkms mkdsc -m hello -v 0.</description></item><item><title>building a binary debian kernel module package with dkms</title><link>chrisarges.net/posts/2013-07-23-building-binary-debian-kernel-module/</link><pubDate>Tue, 23 Jul 2013 14:40:00 -0700</pubDate><guid>chrisarges.net/posts/2013-07-23-building-binary-debian-kernel-module/</guid><description>DKMS packaging works great for building out of tree kernel modules. However, what do you do when you need to install to a machine without a compiler? You can accompish this by using DKMS&amp;rsquo;s mkdriverdisk functionality.
First follow the steps here for setting up a proper DKMS package.
After you&amp;rsquo;ve built the module successfully, you can use the following bash script to extract the .deb installer from the driverdisk. This way you can copy the deb file to the target machine and install.</description></item><item><title>using git send-email for sending kernel patches</title><link>chrisarges.net/posts/2013-07-18-using-git-send-email-for-sending-kernel/</link><pubDate>Thu, 18 Jul 2013 15:27:00 -0700</pubDate><guid>chrisarges.net/posts/2013-07-18-using-git-send-email-for-sending-kernel/</guid><description>Sending patches to a Linux kernel mailing list can be done easily using git-send-email. This post will help setup your environment and show you how to format the git send-email command. In addition there are some more advanced features that help when you need to send from multiple accounts.
Git Setup First, install git and git-email. Then, setup ~/.gitconfig for your user and proper sendemail section. This shows a sendemail setup for a typical single gmail account.</description></item></channel></rss>